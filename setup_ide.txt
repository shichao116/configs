#### Vundle ####

1. Vundle (https://github.com/VundleVim/Vundle.vim)
   git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
2. Configure Plugins:
   Put this at the top of your .vimrc to use Vundle. Remove plugins you don't need
   they are for illustration purposes. 
   

   set nocompatible              " be iMproved, required
   filetype off                  " required
   
   " set the runtime path to include Vundle and initialize
   set rtp+=~/.vim/bundle/Vundle.vim
   call vundle#begin()
   " alternatively, pass a path where Vundle should install plugins
   "call vundle#begin('~/some/path/here')
   
   " let Vundle manage Vundle, required
   Plugin 'VundleVim/Vundle.vim'
   
   " The following are examples of different formats supported.
   " Keep Plugin commands between vundle#begin/end.
   " plugin on GitHub repo
   Plugin 'tpope/vim-fugitive'
   " plugin from http://vim-scripts.org/vim/scripts.html
   " Plugin 'L9'
   " Git plugin not hosted on GitHub
   Plugin 'git://git.wincent.com/command-t.git'
   " git repos on your local machine (i.e. when working on your own plugin)
   Plugin 'file:///home/gmarik/path/to/plugin'
   " The sparkup vim script is in a subdirectory of this repo called vim.
   " Pass the path to set the runtimepath properly.
   Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
   " Install L9 and avoid a Naming conflict if you've already installed a
   " different version somewhere else.
   " Plugin 'ascenator/L9', {'name': 'newL9'}
   
   " All of your Plugins must be added before the following line
   call vundle#end()            " required
   filetype plugin indent on    " required
   " To ignore plugin indent changes, instead use:
   "filetype plugin on
   "
   " Brief help
   " :PluginList       - lists configured plugins
   " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
   " :PluginSearch foo - searches for foo; append `!` to refresh local cache
   " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
   "
   " see :h vundle for more details or wiki for FAQ
   " Put your non-Plugin stuff after this line

3. Install Plugins:
   Launch vim and run :PluginInstall
   To install from command line: vim +PluginInstall +qall

4. (optional) For those using the fish shell: add set shell=/bin/bash to your .vimrc

#### Tmux ####

1. Install tmux-vim-navigator
   Add the following to ~/.vimrc file
   Plugin 'christoomey/vim-tmux-navigator' 
   Then run :PluginInstall in vim

2. In .vimrc, add the following snippet:

   function! TmuxMove(direction)
           let wnr = winnr()
           silent! execute 'wincmd ' . a:direction
           " If the winnr is still the same after we moved, it is the last pane
           if wnr == winnr()
                   call system('tmux select-pane -' . tr(a:direction, 'phjkl', 'lLDUR'))
           end
   endfunction
   
   nnoremap <silent> <c-h> :call TmuxMove('h')<cr>
   nnoremap <silent> <c-j> :call TmuxMove('j')<cr>
   nnoremap <silent> <c-k> :call TmuxMove('k')<cr>
   nnoremap <silent> <c-l> :call TmuxMove('l')<cr>

3. In .tmux.conf, add the following snippet:
   bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-k" "select-pane -U"
bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-j" "select-pane -D"
bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-h" "select-pane -L"
bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-l" "select-pane -R"

#### ctrl-p ####

1. Install ctrlp:   
   Add the following line to .vimrc
   Plugin 'ctrlpvim/ctrlp.vim'
2. Add following lines to .vimrc:
   let g:ctrlp_map = '<c-p>'
   let g:ctrlp_cmd = 'CtrlP'
   let g:ctrlp_working_path_mode = 'ra'

#### NERDTree ####
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
" Open with ctrl + n
map <C-n> :NERDTreeToggle<CR>
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |     q | endif
" open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" open NERDTree automatically when vim starts up on opening a directory?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'N    ERDTree' argv()[0] | wincmd p | ene | endif

#### airline ####
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme='papercolor'

#### easy_motion ####
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" fugitive.vim
Plugin 'tpope/vim-fugitive'

" syntastic
"Plugin 'vim-syntastic/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" papercolor-theme
Plugin 'NLKNguyen/papercolor-theme'
set t_Co=256
set background=dark
set rtp+=/home/cshi/.vim/bundle/papercolor-theme/colors/PaperColor.vim
colorscheme PaperColor
" turn on line numbers and status bar
set number
set laststatus=2

" tagbar
Plugin 'majutsushi/tagbar'
nnoremap <silent> <F9> :TagbarToggle<CR>

" auto complete
Plugin 'Valloric/YouCompleteMe'
" let g:ycm_python_binary_path = '/home/cshi/anaconda2/bin/python'
" for semantic complete, <C-Space> interferes with system input method
inoremap <C-Space> <C-x><C-o>
inoremap <C-'> <C-Space>
" Need to run conda install libgcc to install for conda python distribution

" cscope and pycscope (for looking up callers of a function)
sudo apt install cscope
conda isntall -c auto pycscope=1.2.1 (source: https://anaconda.org/auto/pycscope)
mkdir ~/.vim/plugin/ && cd !$ && wget http://cscope.sourceforge.net/cscope_maps.vim (source: http://cscope.sourceforge.net/cscope_vim_tutorial.html)


